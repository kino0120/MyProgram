#include <bits/stdc++.h>
 
using namespace std;

typedef long long LL;
typedef vector<LL> VLL;
typedef vector<VLL> VVLL;
typedef vector<VVLL> VVVLL;

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define REP(i,n)  FOR(i,0,n)
#define SIZE(a) int((a).size())

int main(void) {
    string s;
    cin >> s;

    int digit = SIZE(s);
    VVVLL dp(digit, VVLL(2, VLL(2, 0)));

    // 0以上n以下で3を含む数の個数を求める
    // dp[i][j][k] i:i桁目、j:未満フラグ(0ならn未満である)、k:3を含むか(1ならすでに3を含んでる)
    LL x0 = s[0] - '0';
    if(x0 > 3) {
        dp[0][0][0] = x0 - 1; // 頭の桁がx0未満かつ3でないものは0〜(x0-1)で3を除く(x0-1)個
        dp[0][0][1] = 1; // 頭の桁がx0未満かつ3のものは1個
        dp[0][1][0] = 1; // 頭の桁がx0かつ3でないのものは1個
        dp[0][1][1] = 0; // 頭の桁がx0かつ3のものは存在しない
    } else if(x0 == 3) {
        dp[0][0][0] = x0; // 頭の桁が3未満かつ3でないものは0〜2の3個
        dp[0][0][1] = 0; // 頭の桁が3未満かつ3のものは存在しない
        dp[0][1][0] = 0; // 頭の桁が3かつ3でないものは存在しない
        dp[0][1][1] = 1; // 頭の桁が3かつ3であるものは1個
    } else if(x0 < 3) {
        dp[0][0][0] = x0; // 頭の桁がx0未満かつ3でないものは0〜(x0-1)のx0個
        dp[0][0][1] = 0; // 頭の桁がx0未満かつ3であるものは存在しない
        dp[0][1][0] = 1; // 頭の桁がx0かつ3でないものは1個
        dp[0][1][1] = 0; // 頭の桁がx0かつ3であるものは存在しない
    }

    FOR(i, 1, digit) {
        LL x = s[i] - '0';
        if(x > 3) {
            // i桁目まででn未満が確定でありを3を含まない
            //            0〜9で3以外ならok     すでに3が含まってる    0〜(x-1)で3以外ならok     すでに3が含まってる
            dp[i][0][0] = dp[i-1][0][0] * 9 + dp[i-1][0][1] * 0 + dp[i-1][1][0] * (x-1) + dp[i-1][1][1] * 0;
            // i桁目まででn未満が確定であり3を含む
            //            3ならok              0〜9のなんでもok      3ならok                 0〜(x-1)ならok
            dp[i][0][1] = dp[i-1][0][0] * 1 + dp[i-1][0][1] *10 + dp[i-1][1][0] * 1     + dp[i-1][1][1] * x;
            // i桁目まで一致して3を含まない
            //            すでにn未満           すでにn未満          xならok                  すでに3が含まってる
            dp[i][1][0] = dp[i-1][0][0] * 0 + dp[i-1][0][1] * 0 + dp[i-1][1][0] * 1     + dp[i-1][1][1] * 0;
            // i桁目まで一致して3を含む
            //            すでにn未満           すでにn未満          xかつ3のものはない         xならok
            dp[i][1][1] = dp[i-1][0][0] * 0 + dp[i-1][0][1] * 0 + dp[i-1][1][0] * 0     + dp[i-1][1][1] * 1;
        } else if(x == 3) {
            // i桁目まででn未満が確定であり3を含まない
            //            0〜9で3以外ならok     すでに3が含まってる    0〜2で3以外ならok         すでに3が含まってる
            dp[i][0][0] = dp[i-1][0][0] * 9 + dp[i-1][0][1] * 0 + dp[i-1][1][0] * x     + dp[i-1][1][1] * 0;
            // i桁目まででn未満が確定であり3を含む
            //            3ならok              0〜9のなんでもok      3未満かつ3のものはない     0〜(x-1)ならok
            dp[i][0][1] = dp[i-1][0][0] * 1 + dp[i-1][0][1] *10 + dp[i-1][1][0] * 0     + dp[i-1][1][1] * x;
            // i桁目まで一致してi桁目が3であり3を含まない(そんなものはない)
            dp[i][1][0] = 0;
            // i桁目まで一致してi桁目が3であり3を含む
            //            すでにn未満           すでにn未満          3ならok                  xならok
            dp[i][1][1] = dp[i-1][0][0] * 0 + dp[i-1][0][1] * 0 + dp[i-1][1][0] * 1     + dp[i-1][1][1] * 1;
        } else if(x < 3) {
            // i桁目まででn未満が確定でありを3を含まない
            //            0〜9で3以外ならok     すでに3が含まってる    0〜(x-1)ならok           すでに3が含まってる
            dp[i][0][0] = dp[i-1][0][0] * 9 + dp[i-1][0][1] * 0 + dp[i-1][1][0] * x     + dp[i-1][1][1] * 0;
            // i桁目まででn未満が確定であり3を含む
            //            3ならok              0〜9のなんでもok      3未満かつ3のものはない     0〜(x-1)ならok
            dp[i][0][1] = dp[i-1][0][0] * 1 + dp[i-1][0][1] *10 + dp[i-1][1][0] * 0     + dp[i-1][1][1] * x;
            // i桁目まで一致して3を含まない
            //            すでにn未満           すでにn未満          xならok                  すでに3が含まってる
            dp[i][1][0] = dp[i-1][0][0] * 0 + dp[i-1][0][1] * 0 + dp[i-1][1][0] * 1     + dp[i-1][1][1] * 0;
            // i桁目まで一致して3を含む
            //            すでにn未満           すでにn未満          xかつ3のものはない         xならok
            dp[i][1][1] = dp[i-1][0][0] * 0 + dp[i-1][0][1] * 0 + dp[i-1][1][0] * 0     + dp[i-1][1][1] * 1;
        }
    }
    // 知りたいのは0以上x以下で3を含むもの
    // dp[digit-1][0][1]:n未満で3を含むもの
    // dp[digit-1][1][1]:nと等しく、3を含むもの
    cout << dp[digit-1][0][1] + dp[digit-1][1][1] << endl;
}